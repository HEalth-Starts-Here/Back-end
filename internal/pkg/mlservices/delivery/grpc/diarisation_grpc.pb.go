// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: diarisation.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiarisationClient is the client API for Diarisation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiarisationClient interface {
	TranscribeAudio(ctx context.Context, in *DiarisationRequest, opts ...grpc.CallOption) (*DiarisationResponse, error)
}

type diarisationClient struct {
	cc grpc.ClientConnInterface
}

func NewDiarisationClient(cc grpc.ClientConnInterface) DiarisationClient {
	return &diarisationClient{cc}
}

func (c *diarisationClient) TranscribeAudio(ctx context.Context, in *DiarisationRequest, opts ...grpc.CallOption) (*DiarisationResponse, error) {
	out := new(DiarisationResponse)
	err := c.cc.Invoke(ctx, "/Diarisation/transcribeAudio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiarisationServer is the server API for Diarisation service.
// All implementations must embed UnimplementedDiarisationServer
// for forward compatibility
type DiarisationServer interface {
	TranscribeAudio(context.Context, *DiarisationRequest) (*DiarisationResponse, error)
	mustEmbedUnimplementedDiarisationServer()
}

// UnimplementedDiarisationServer must be embedded to have forward compatible implementations.
type UnimplementedDiarisationServer struct {
}

func (UnimplementedDiarisationServer) TranscribeAudio(context.Context, *DiarisationRequest) (*DiarisationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TranscribeAudio not implemented")
}
func (UnimplementedDiarisationServer) mustEmbedUnimplementedDiarisationServer() {}

// UnsafeDiarisationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiarisationServer will
// result in compilation errors.
type UnsafeDiarisationServer interface {
	mustEmbedUnimplementedDiarisationServer()
}

func RegisterDiarisationServer(s grpc.ServiceRegistrar, srv DiarisationServer) {
	s.RegisterService(&Diarisation_ServiceDesc, srv)
}

func _Diarisation_TranscribeAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiarisationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiarisationServer).TranscribeAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Diarisation/transcribeAudio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiarisationServer).TranscribeAudio(ctx, req.(*DiarisationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Diarisation_ServiceDesc is the grpc.ServiceDesc for Diarisation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Diarisation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Diarisation",
	HandlerType: (*DiarisationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "transcribeAudio",
			Handler:    _Diarisation_TranscribeAudio_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "diarisation.proto",
}
